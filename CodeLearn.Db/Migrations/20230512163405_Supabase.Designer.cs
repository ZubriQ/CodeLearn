// <auto-generated />
using System;
using CodeLearn.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CodeLearn.Db.Migrations
{
    [DbContext(typeof(CodeLearnContext))]
    [Migration("20230512163405_Supabase")]
    partial class Supabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CodeLearn.Db.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsTeacher")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationUser");
                });

            modelBuilder.Entity("CodeLearn.Db.DataType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Void",
                            ShortName = "void"
                        },
                        new
                        {
                            Id = 2,
                            Name = "System.Boolean",
                            ShortName = "bool"
                        },
                        new
                        {
                            Id = 3,
                            Name = "System.Byte",
                            ShortName = "byte"
                        },
                        new
                        {
                            Id = 4,
                            Name = "System.SByte",
                            ShortName = "sbyte"
                        },
                        new
                        {
                            Id = 5,
                            Name = "System.Char",
                            ShortName = "char"
                        },
                        new
                        {
                            Id = 6,
                            Name = "System.Decimal",
                            ShortName = "decimal"
                        },
                        new
                        {
                            Id = 7,
                            Name = "System.Double",
                            ShortName = "double"
                        },
                        new
                        {
                            Id = 8,
                            Name = "System.Single",
                            ShortName = "float"
                        },
                        new
                        {
                            Id = 9,
                            Name = "System.Int32",
                            ShortName = "int"
                        },
                        new
                        {
                            Id = 10,
                            Name = "System.UInt32",
                            ShortName = "uint"
                        },
                        new
                        {
                            Id = 11,
                            Name = "System.Int64",
                            ShortName = "long"
                        },
                        new
                        {
                            Id = 12,
                            Name = "System.UInt64",
                            ShortName = "ulong"
                        },
                        new
                        {
                            Id = 13,
                            Name = "System.Int16",
                            ShortName = "short"
                        },
                        new
                        {
                            Id = 14,
                            Name = "System.UInt16",
                            ShortName = "ushort"
                        },
                        new
                        {
                            Id = 15,
                            Name = "System.IntPtr",
                            ShortName = "nint"
                        },
                        new
                        {
                            Id = 16,
                            Name = "System.Object",
                            ShortName = "object"
                        },
                        new
                        {
                            Id = 17,
                            Name = "System.String",
                            ShortName = "string"
                        },
                        new
                        {
                            Id = 18,
                            Name = "System.Object",
                            ShortName = "dynamic"
                        });
                });

            modelBuilder.Entity("CodeLearn.Db.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClassName")
                        .HasColumnType("text");

                    b.Property<string>("CodingArea")
                        .HasColumnType("text");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ExerciseTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("OptionalDlls")
                        .HasColumnType("text");

                    b.Property<string>("OptionalUsings")
                        .HasColumnType("text");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseTypeId");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassName = "TestClass",
                            CodingArea = "public static double GetArea(double a, double b)\n{\n    // Example\n    return a * b;\n}",
                            Context = "// tests example\nstatic void Main()\n{\n Console.WriteLine(GetArea(6, 6));\n Console.WriteLine(GetArea(7.5, 10));\n Console.WriteLine(GetArea(1, 5));\n}",
                            Description = "Напишите тело метода GetArea так, чтобы оно возвращало площадь прямоугольника. Можете считать, что параметры ''''a'''' и ''''b'''' всегда положительные числа.",
                            ExerciseTypeId = 1,
                            Score = 1,
                            ShortDescription = "Вычисление площади"
                        },
                        new
                        {
                            Id = 2,
                            ClassName = "TestClass",
                            CodingArea = "public static double GetNumber(long a)\n{\n    // example\n    return --a;\n}",
                            Context = "// example\nGetNumber(3);\nGetNumber(75);\nGetNumber(100);",
                            Description = "Для простого примера, выведите число, которой будет на 1 меньше.",
                            ExerciseTypeId = 1,
                            Score = 1,
                            ShortDescription = "Простой вывод"
                        });
                });

            modelBuilder.Entity("CodeLearn.Db.ExerciseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ExerciseTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Method coding"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Class coding"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Question"
                        });
                });

            modelBuilder.Entity("CodeLearn.Db.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Test group",
                            Year = 2023
                        });
                });

            modelBuilder.Entity("CodeLearn.Db.TestCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TestMethodId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TestMethodId");

                    b.ToTable("TestCases");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Result = "9",
                            TestMethodId = 1
                        },
                        new
                        {
                            Id = 2,
                            Result = "10",
                            TestMethodId = 1
                        },
                        new
                        {
                            Id = 3,
                            Result = "5",
                            TestMethodId = 2
                        },
                        new
                        {
                            Id = 4,
                            Result = "8",
                            TestMethodId = 2
                        });
                });

            modelBuilder.Entity("CodeLearn.Db.TestCaseParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<int>("TestCaseId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TestCaseId");

                    b.ToTable("TestCaseParameters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Position = 0,
                            TestCaseId = 1,
                            Value = "3"
                        },
                        new
                        {
                            Id = 2,
                            Position = 1,
                            TestCaseId = 1,
                            Value = "3"
                        },
                        new
                        {
                            Id = 3,
                            Position = 0,
                            TestCaseId = 2,
                            Value = "5"
                        },
                        new
                        {
                            Id = 4,
                            Position = 1,
                            TestCaseId = 2,
                            Value = "2"
                        },
                        new
                        {
                            Id = 5,
                            Position = 0,
                            TestCaseId = 3,
                            Value = "6"
                        },
                        new
                        {
                            Id = 6,
                            Position = 0,
                            TestCaseId = 4,
                            Value = "9"
                        });
                });

            modelBuilder.Entity("CodeLearn.Db.Testing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TestCreatorId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TestCreatorId");

                    b.ToTable("Testings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Простой пример теста по программированию на языке C#",
                            DurationInMinutes = 50,
                            Name = "Тест",
                            TestCreatorId = "4de9a78f-83a2-4c5b-900f-b107ddf6efba"
                        });
                });

            modelBuilder.Entity("CodeLearn.Db.TestingAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .HasColumnType("text");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("integer");

                    b.Property<string>("FailureInfo")
                        .HasColumnType("text");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<int>("TestingResultId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("TestingResultId");

                    b.ToTable("TestingAnswers");
                });

            modelBuilder.Entity("CodeLearn.Db.TestingResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("PassingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TestingId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TestingId");

                    b.ToTable("TestingResults");
                });

            modelBuilder.Entity("CodeLearn.Db.TestMethodInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ExerciseId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReturnTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("ReturnTypeId");

                    b.ToTable("TestMethodInfos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExerciseId = 1,
                            Name = "GetArea",
                            ReturnTypeId = 7
                        },
                        new
                        {
                            Id = 2,
                            ExerciseId = 2,
                            Name = "GetNumber",
                            ReturnTypeId = 11
                        });
                });

            modelBuilder.Entity("CodeLearn.Db.TestMethodParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DataTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<int>("TestMethodInfoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DataTypeId");

                    b.HasIndex("TestMethodInfoId");

                    b.ToTable("TestMethodParameters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataTypeId = 7,
                            Position = 0,
                            TestMethodInfoId = 1
                        },
                        new
                        {
                            Id = 2,
                            DataTypeId = 7,
                            Position = 1,
                            TestMethodInfoId = 1
                        },
                        new
                        {
                            Id = 3,
                            DataTypeId = 11,
                            Position = 0,
                            TestMethodInfoId = 2
                        });
                });

            modelBuilder.Entity("ExerciseTesting", b =>
                {
                    b.Property<int>("CoursesId")
                        .HasColumnType("integer");

                    b.Property<int>("ExercisesId")
                        .HasColumnType("integer");

                    b.HasKey("CoursesId", "ExercisesId");

                    b.HasIndex("ExercisesId");

                    b.ToTable("ExerciseTesting");

                    b.HasData(
                        new
                        {
                            CoursesId = 1,
                            ExercisesId = 1
                        },
                        new
                        {
                            CoursesId = 1,
                            ExercisesId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CodeLearn.Db.Student", b =>
                {
                    b.HasBaseType("CodeLearn.Db.ApplicationUser");

                    b.HasIndex("GroupId");

                    b.HasDiscriminator().HasValue("Student");

                    b.HasData(
                        new
                        {
                            Id = "06d7c3b3-f791-4c71-8c4f-1c756282e307",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8b6aeaab-1d38-43ef-87d5-ad6c64a792a7",
                            Email = "student@example.com",
                            EmailConfirmed = true,
                            FirstName = "studentFirstName",
                            GroupId = 1,
                            IsTeacher = true,
                            LastName = "studentLastName",
                            LockoutEnabled = true,
                            NormalizedEmail = "STUDENT@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT",
                            PasswordHash = "AQAAAAEAACcQAAAAELGT7MIgBATE557c4P5Ms0iEf8Bh+p+1UF30DabkubdrV7rvA82QBUV3VNamfQGFrQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "61b0f8c3-d835-4e75-98cf-7da5ce4909cf",
                            TwoFactorEnabled = false,
                            UserName = "student"
                        });
                });

            modelBuilder.Entity("CodeLearn.Db.Teacher", b =>
                {
                    b.HasBaseType("CodeLearn.Db.ApplicationUser");

                    b.HasDiscriminator().HasValue("Teacher");

                    b.HasData(
                        new
                        {
                            Id = "4de9a78f-83a2-4c5b-900f-b107ddf6efba",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "98ac3684-c718-497e-82f3-e3710a8e048d",
                            Email = "teacher@example.com",
                            EmailConfirmed = true,
                            FirstName = "teacherFirstName",
                            IsTeacher = true,
                            LastName = "teacherLastName",
                            LockoutEnabled = true,
                            NormalizedEmail = "TEACHER@EXAMPLE.COM",
                            NormalizedUserName = "TEACHER",
                            PasswordHash = "AQAAAAEAACcQAAAAEGkVjFxxbIE68IMDVlBOsEI7ojGzlKb74bK2kQ+sxNwqR1dp7DuDpJVM7P8Oxb0FGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b9661c70-09fc-4c06-9120-e32a787c791d",
                            TwoFactorEnabled = false,
                            UserName = "teacher"
                        });
                });

            modelBuilder.Entity("CodeLearn.Db.Exercise", b =>
                {
                    b.HasOne("CodeLearn.Db.ExerciseType", "ExerciseType")
                        .WithMany("Exercises")
                        .HasForeignKey("ExerciseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExerciseType");
                });

            modelBuilder.Entity("CodeLearn.Db.TestCase", b =>
                {
                    b.HasOne("CodeLearn.Db.TestMethodInfo", "TestMethod")
                        .WithMany("TestCases")
                        .HasForeignKey("TestMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestMethod");
                });

            modelBuilder.Entity("CodeLearn.Db.TestCaseParameter", b =>
                {
                    b.HasOne("CodeLearn.Db.TestCase", "TestCase")
                        .WithMany("TestCaseParameters")
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestCase");
                });

            modelBuilder.Entity("CodeLearn.Db.Testing", b =>
                {
                    b.HasOne("CodeLearn.Db.Teacher", "TestCreator")
                        .WithMany("Testings")
                        .HasForeignKey("TestCreatorId");

                    b.Navigation("TestCreator");
                });

            modelBuilder.Entity("CodeLearn.Db.TestingAnswer", b =>
                {
                    b.HasOne("CodeLearn.Db.Exercise", "Exercise")
                        .WithMany("TestingAnswers")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeLearn.Db.TestingResult", "TestingResult")
                        .WithMany("TestingAnswers")
                        .HasForeignKey("TestingResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("TestingResult");
                });

            modelBuilder.Entity("CodeLearn.Db.TestingResult", b =>
                {
                    b.HasOne("CodeLearn.Db.Student", "Student")
                        .WithMany("TestingResults")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeLearn.Db.Testing", "Testing")
                        .WithMany("TestingResults")
                        .HasForeignKey("TestingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Testing");
                });

            modelBuilder.Entity("CodeLearn.Db.TestMethodInfo", b =>
                {
                    b.HasOne("CodeLearn.Db.Exercise", "Exercise")
                        .WithMany("TestMethodInfos")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeLearn.Db.DataType", "ReturnType")
                        .WithMany("TestMethodInfos")
                        .HasForeignKey("ReturnTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("ReturnType");
                });

            modelBuilder.Entity("CodeLearn.Db.TestMethodParameter", b =>
                {
                    b.HasOne("CodeLearn.Db.DataType", "DataType")
                        .WithMany("TestMethodParameters")
                        .HasForeignKey("DataTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeLearn.Db.TestMethodInfo", "TestMethodInfo")
                        .WithMany("TestMethodParameters")
                        .HasForeignKey("TestMethodInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataType");

                    b.Navigation("TestMethodInfo");
                });

            modelBuilder.Entity("ExerciseTesting", b =>
                {
                    b.HasOne("CodeLearn.Db.Testing", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeLearn.Db.Exercise", null)
                        .WithMany()
                        .HasForeignKey("ExercisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CodeLearn.Db.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CodeLearn.Db.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeLearn.Db.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CodeLearn.Db.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeLearn.Db.Student", b =>
                {
                    b.HasOne("CodeLearn.Db.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("CodeLearn.Db.DataType", b =>
                {
                    b.Navigation("TestMethodInfos");

                    b.Navigation("TestMethodParameters");
                });

            modelBuilder.Entity("CodeLearn.Db.Exercise", b =>
                {
                    b.Navigation("TestMethodInfos");

                    b.Navigation("TestingAnswers");
                });

            modelBuilder.Entity("CodeLearn.Db.ExerciseType", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("CodeLearn.Db.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("CodeLearn.Db.TestCase", b =>
                {
                    b.Navigation("TestCaseParameters");
                });

            modelBuilder.Entity("CodeLearn.Db.Testing", b =>
                {
                    b.Navigation("TestingResults");
                });

            modelBuilder.Entity("CodeLearn.Db.TestingResult", b =>
                {
                    b.Navigation("TestingAnswers");
                });

            modelBuilder.Entity("CodeLearn.Db.TestMethodInfo", b =>
                {
                    b.Navigation("TestCases");

                    b.Navigation("TestMethodParameters");
                });

            modelBuilder.Entity("CodeLearn.Db.Student", b =>
                {
                    b.Navigation("TestingResults");
                });

            modelBuilder.Entity("CodeLearn.Db.Teacher", b =>
                {
                    b.Navigation("Testings");
                });
#pragma warning restore 612, 618
        }
    }
}
